import { resolve } from 'path';
import tailwindCSS from 'tailwindcss';
import purgeCSSPlugin from '@fullhuman/postcss-purgecss';
import cssnanoPlugin from 'cssnano';
import dotenvPlugin from 'dotenv-safe';

export default {
  /**
   * Function that mutates the original webpack config.
   * Supports asynchronous changes when a promise is returned (or it's an async function).
   *
   * @param {object} config - original webpack config.
   * @param {object} env - options passed to the CLI.
   * @param {WebpackConfigHelpers} helpers - object with useful helpers for working with the webpack config.
   * @param {object} options - this is mainly relevant for plugins (will always be empty in the config), default to an empty object
   **/
  webpack(config, env, helpers, options) {
    if (env.isProd) {
      config.devtool = false; // disable sourcemaps
    }
    config.module.rules[4].use.splice(1, 0, {
      loader: '@teamsupercell/typings-for-css-modules-loader',
      options: {
        banner: '// This file is automatically generated from your CSS. Any edits will be overwritten.',
        disableLocalsExport: true,
      },
    });
    // Use any `index` file, not just index.js
    config.resolve.alias['preact-cli-entrypoint'] = resolve(process.cwd(), 'src', 'index');

    helpers.getLoadersByName(config, 'postcss-loader').forEach(({ loader }) => {
      const plugins = loader.options.plugins;
      plugins.unshift(tailwindCSS);

      const purgeCSS = purgeCSSPlugin({
        content: ['./src/**/*.js', './src/**/*.jxs', './src/**/*.txs'],
      });

      if (env.production) {
        plugins.push(purgeCSS);
        plugins.push(cssnanoPlugin({ preset: 'default' }));
      }
    });

    const { plugin } = helpers.getPluginsByName(config, 'DefinePlugin')[0];
    const dotenv = dotenvPlugin.config();
    Object.assign(
      plugin.definitions,
      Object.keys(dotenv.parsed).reduce(
        (env, key) => ({
          ...env,
          [`process.env.${key}`]: JSON.stringify(dotenv.parsed[key]),
        }),
        {},
      ),
    );
  },
};
